# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - master
  paths:
    include:
      - Terraform/services/*

stages:
  - stage: Build
    jobs:
      - job: Build

        pool:
          vmImage: "ubuntu-latest"

        steps:
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(Build.SourcesDirectory)/Terraform/global"
              ArtifactName: "global"
              publishLocation: "Container"
            displayName: "Create Artifact for the global Folder"

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(Build.SourcesDirectory)/Terraform/services"
              ArtifactName: "services"
              publishLocation: "Container"
            displayName: "Create Artifact for the services Folder"

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(Build.SourcesDirectory)/Terraform/services/wvd-img/TestArtifact"
              ArtifactName: "testartifact"
              publishLocation: "Container"
            displayName: "Create testartifact"

  - stage: Deploy
    dependsOn: Build
    condition: succeeded()

    jobs:
      - job: Deploy

        pool:
          vmImage: "ubuntu-latest"

        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: "current"
              downloadType: "single"
              artifactName: "global"
              downloadPath: "$(System.DefaultWorkingDirectory)"
            displayName: "Download global Artifact"

          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: "current"
              downloadType: "single"
              artifactName: "services"
              downloadPath: "$(System.DefaultWorkingDirectory)"
            displayName: "Download services Artifact"

          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: "current"
              downloadType: "single"
              artifactName: "testartifact"
              downloadPath: "$(System.DefaultWorkingDirectory)"
            displayName: "Download testartifact"

          - task: TerraformInstaller@0
            inputs:
              terraformVersion: "0.12.28"

          - task: TerraformTaskV1@0
            inputs:
              provider: "azurerm"
              command: "init"
              workingDirectory: "$(System.DefaultWorkingDirectory)/services/wvd-sig/"
              backendServiceArm: "MSDN"
              backendAzureRmResourceGroupName: "tfstate-rg"
              backendAzureRmStorageAccountName: "chterraformbestpractices"
              backendAzureRmContainerName: "wvdsig"
              backendAzureRmKey: "wvdsig.tfstate"
            displayName: "Terrafom Init wvd-sig"

          - task: TerraformTaskV1@0
            inputs:
              provider: "azurerm"
              command: "validate"
              workingDirectory: "$(System.DefaultWorkingDirectory)/services/wvd-sig/"
            displayName: "Terrafom Validate wvd-sig"

          - task: TerraformTaskV1@0
            inputs:
              provider: "azurerm"
              command: "plan"
              workingDirectory: "$(System.DefaultWorkingDirectory)/services/wvd-sig/"
              commandOptions: "-out main.tfplan"
              environmentServiceNameAzureRM: "MSDN"
            displayName: "Terrafom plan wvd-sig"

          - task: TerraformTaskV1@0
            inputs:
              provider: "azurerm"
              command: "apply"
              workingDirectory: "$(System.DefaultWorkingDirectory)/services/wvd-sig/"
              commandOptions: "main.tfplan"
              environmentServiceNameAzureRM: "MSDN"
            displayName: "Terrafom apply wvd-sig"
          
          - task: AzureImageBuilderTask@1
            inputs:
              managedIdentity: '/subscriptions/3932848d-e8f8-4a6e-a772-bc69214d0530/resourcegroups/sig-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/chaibIdentity'
              imageSource: 'marketplace'
              baseImagePubOfferSku: 'MicrosoftWindowsDesktop:office-365:20h1-evd-o365pp'
              provisioner: 'powershell'
              windowsUpdateProvisioner: true
              packagePath: '$(System.DefaultWorkingDirectory)/testartifact'
              inlineScript: '& C:\buildArtifacts\testartifact\website.ps1'
              storageAccountName: 'wvdfilesharech'
              distributeType: 'sig'
              galleryImageId: '/subscriptions/3932848d-e8f8-4a6e-a772-bc69214d0530/resourceGroups/sig-rg/providers/Microsoft.Compute/galleries/chwvdsig/images/wvd-test'
              replicationRegions: 'westeurope'
              ibSubscription: 'MSDN'
              ibAzureResourceGroup: 'sig-rg'
              ibLocation: 'westeurope'